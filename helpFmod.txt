/*================== constantes ===============*/

   FMOD_RESULT FMOD_DSP_SetActive(
  FMOD_DSP *  dsp,
  FMOD_BOOL  active
);

FMOD_RESULT FMOD_System_AddDSP(
  FMOD_SYSTEM *  system,
  FMOD_DSP *  dsp,
  FMOD_DSPCONNECTION **  connection
);



FMOD_RESULT FMOD_System_CreateDSP(
  FMOD_SYSTEM *  system,
  FMOD_DSP_DESCRIPTION *  description,
  FMOD_DSP **  dsp
);


FMOD_RESULT FMOD_Channel_AddDSP(
  FMOD_CHANNEL *  channel,
  FMOD_DSP *  dsp,
  FMOD_DSPCONNECTION **  connection
);

FMOD_RESULT FMOD_DSP_GetActive(
  FMOD_DSP *  dsp,
  FMOD_BOOL *  active
);

FMOD_RESULT FMOD_DSP_SetActive(
  FMOD_DSP *  dsp,
  FMOD_BOOL  active
);

FMOD_RESULT DSP::getDefaults(
  float *  frequency,
  float *  volume,
  float *  pan,
  int *  priority
);

FMOD_RESULT FMOD_DSP_SetDefaults(
  FMOD_DSP *  dsp,
  float  frequency,
  float  volume,
  float  pan,
  int  priority
);

FMOD_RESULT FMOD_DSP_SetSpeakerActive(
  FMOD_DSP *  dsp,
  FMOD_SPEAKER  speaker,
  FMOD_BOOL  active
);


/*==== tuto ====*/

result = system->playSound(FMOD_CHANNEL_FREE, sound, false, &channel);
result = channel->setVolume(volume);
result = system->createDSPByType(FMOD_DSP_TYPE_ECHO, &dsp);
result = channel->addDSP(dsp, 0);

/* system */
result = system->playSound(FMOD_CHANNEL_FREE, sound, false, &channel);
result = channel->setVolume(volume);
result = system->createDSPByType(FMOD_DSP_TYPE_ECHO, &dsp);
result = system->addDSP(dsp, 0);


/*================== init sound ===============*/
    /*result = channel->setVolume(volume);*/
    FMOD_DSP *dsp;
    FMOD_DSP_DESCRIPTION dspdes = {
    "fuck it fmod dsp",
    0,
    0,
    0, 0, 0, 0,
    0,
    0, 0,
    /*DSP::getNumParame, FMOD_DSP_PARAMETERDESC *  paramdesc;*/
    0, 0,
    0, 0, 0,
    0};

    result = FMOD_System_CreateDSPByType(sound->system, FMOD_DSP_TYPE_UNKNOWN, &dsp);
    ft_fmod_check_error(result, "sys create dsp", __FILE__, __LINE__);
    result = FMOD_System_AddDSP(sound->system, dsp, 0);
    ft_fmod_check_error(result, "sys add dsp", __FILE__, __LINE__);


/*================== redcode's tuto ===============*/


/* hash */
//For every line of data:
for (int freq = LOWER_LIMIT; freq < UPPER_LIMIT-1; freq++)
{
    //Get the magnitude:
    double mag = Math.log(results[freq].abs() + 1);
    //Find out which range we are in:
    int index = getIndex(freq);
    //Save the highest magnitude and corresponding frequency:
    if (mag > highscores[index])
    {
        highscores[index] = mag;
        recordPoints[index] = freq;
    }
}

//Write the points to a file:
for (int i = 0; i < AMOUNT_OF_POINTS; i++)
{
    fw.append(recordPoints[i] + "\t");
}
fw.append("\n");
// ... snip ...
int[] RANGE = new int[] {40,80,120,180, UPPER_LIMIT+1};
//Find out in which range
int getIndex(int freq)
{
    int i = 0;
    while(RANGE[i] < freq)
        i++;
    return i;
}


/* search match */
//Using a little bit of error-correction, damping
int FUZ_FACTOR = 2;

long hash(String line)
{
    String[] p = line.split("\t");
    long p1 = Long.parseLong(p[0]);
    long p2 = Long.parseLong(p[1]);
    long p3 = Long.parseLong(p[2]);
    long p4 = Long.parseLong(p[3]);
    return (p4-(p4%FUZ_FACTOR)) * 100000000 + (p3-(p3%FUZ_FACTOR)) * 100000
            + (p2-(p2%FUZ_FACTOR)) * 100 + (p1-(p1%FUZ_FACTOR));
}

/* nb : *.h */
private class DataPoint
{
    private int time;
    private int songId;
    public DataPoint(int songId, int time)
    {
        this.songId = songId;
        this.time = time;
    }
    public int getTime()
    {
        return time;
    }
    public int getSongId()
    {
        return songId;
    }
}